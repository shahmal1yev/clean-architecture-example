services:
  _defaults:
    autowire: true
    autoconfigure: true

  # Auto-register services in App layer
  Onion\App\Services\:
    resource: '../src/App/Services/*'
    
  # CQRS Query Handlers
  Onion\App\QueryHandlers\:
    resource: '../src/App/QueryHandlers/*'
    
  # Make services public for testing
  Onion\App\Services\BookService:
    public: true

  # Presentation layer services
  Onion\Presentation\Actions\:
    resource: '../src/Presentation/Actions/*'
    public: true

  Onion\Presentation\Adapters\:
    resource: '../src/Presentation/Adapters/*'
    public: true

  # GraphQL Services
  Onion\Presentation\GraphQL\Types\:
    resource: '../src/Presentation/GraphQL/Types/*'
    
  # GraphQL Resolver with specific adapter binding
  Onion\Presentation\GraphQL\Resolvers\BookResolver:
    arguments:
      - '@Onion\Presentation\Adapters\GraphBookManagementAdapter'
    
  # GraphQL Schema as a factory
  GraphQL\Type\Schema:
    factory: ['@Onion\Presentation\GraphQL\Schema\SchemaBuilder', 'build']
    
  Onion\Presentation\GraphQL\Schema\SchemaBuilder:
    public: false
    
  Onion\Presentation\GraphQL\GraphQLController:
    public: true

  # Hexagonal Architecture: Port to Adapter binding
  # Default to HTTP adapter, but can be overridden for GraphQL context
  Onion\Presentation\Ports\BookManagementPort:
    alias: Onion\Presentation\Adapters\HttpBookManagementAdapter
    public: true
    
  # GraphQL-specific Port binding  
  Onion\Presentation\Adapters\GraphBookManagementAdapter:
    public: true

  # Infrastructure layer services
  Onion\Infrastructure\Repositories\:
    resource: '../src/Infrastructure/Repositories/*'
    exclude: '../src/Infrastructure/Repositories/Repository.php'

  Onion\Infrastructure\Services\:
    resource: '../src/Infrastructure/Services/*'

  # Bind interface to implementation (public for testing)
  Onion\Domain\Repositories\BookRepositoryInterface:
    alias: Onion\Infrastructure\Repositories\BookRepository
    public: true

  Onion\Domain\Services\TransactionManagerInterface:
    alias: Onion\Infrastructure\Services\TransactionManager
    public: true

  # Database configuration (you'll want to use environment variables)
  Onion\Infrastructure\Config\DatabaseCredentials:
    arguments:
      $host: 'localhost'
      $port: 5432
      $user: 'postgres'
      $password: "@@Ucvlqcq8$"
      $database: 'onion'

  Onion\Infrastructure\Factory\PDOFactory:
    arguments:
      - '@Onion\Infrastructure\Config\DatabaseCredentials'

  PDO:
    class: PDO
    factory: ['@Onion\Infrastructure\Factory\PDOFactory', 'create']
